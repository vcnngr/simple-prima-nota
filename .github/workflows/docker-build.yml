#!/bin/bash

# Script per release automatica con GitHub Actions
set -e

# Colori per output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funzione per stampare messaggi colorati
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verifica che siamo in una repository git
if [ ! -d ".git" ]; then
    print_error "Non sei in una repository git!"
    exit 1
fi

# Verifica che non ci siano modifiche non committate
if [ -n "$(git status --porcelain)" ]; then
    print_warning "Ci sono modifiche non committate:"
    git status --short
    echo
    read -p "Vuoi continuare comunque? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_error "Release annullata"
        exit 1
    fi
fi

# Mostra l'ultimo tag
LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "nessun tag precedente")
print_status "Ultimo tag: $LAST_TAG"

# Chiedi la nuova versione
echo
echo "Inserisci la nuova versione (es: 0.5.0, 1.0.0, 0.5.1):"
read -r NEW_VERSION

# Valida il formato versione (semantic versioning)
if [[ ! $NEW_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    print_error "Formato versione non valido. Usa il formato x.y.z (es: 1.0.0)"
    exit 1
fi

# Verifica che il tag non esista già
if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
    print_error "Il tag v$NEW_VERSION esiste già!"
    exit 1
fi

print_status "Creando release $NEW_VERSION..."

# Aggiorna il file VERSION se esiste
if [ -f "VERSION" ]; then
    echo "$NEW_VERSION" > VERSION
    git add VERSION
    print_status "File VERSION aggiornato"
fi

# Commit delle modifiche se ce ne sono
if [ -n "$(git status --porcelain)" ]; then
    print_status "Committando le modifiche..."
    git commit -m "Release version $NEW_VERSION"
fi

# Crea il tag
print_status "Creando tag v$NEW_VERSION..."
git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"

# Push dei commit e del tag
print_status "Pushing su origin..."
git push origin main
git push origin "v$NEW_VERSION"

print_success "Release $NEW_VERSION creata con successo!"
print_status "Il workflow GitHub Actions inizierà automaticamente il build..."
print_status "Controlla lo stato su: https://github.com/$(git remote get-url origin | sed 's/.*github.com[:/]\([^/]*\/[^/]*\)\.git/\1/')/actions"

echo
print_status "Le immagini saranno disponibili come:"
echo "  - vcnngr/pnbackend:$NEW_VERSION"
echo "  - vcnngr/pnbackend:latest"
echo "  - vcnngr/pnfrontend:$NEW_VERSION" 
echo "  - vcnngr/pnfrontend:latest"
