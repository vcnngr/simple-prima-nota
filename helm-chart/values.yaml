# Default values for simple-prima-nota
global:
  imageRegistry: "docker.io"

# PostgreSQL Standalone (modalità attuale)
postgresql:
  enabled: false  # Disabilitato di default per favorire CloudNativePG
  image:
    registry: docker.io
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  auth:
    database: prima_nota
    username: postgres
    password: ""
  persistence:
    enabled: true
    size: 8Gi
    accessModes:
      - ReadWriteOnce
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  service:
    type: ClusterIP
    port: 5432

# CloudNativePG Cluster (modalità enterprise)
cloudnativepg:
  enabled: true  # Abilitato di default
  cluster:
    name: "prima-nota-postgres"  # Nome del cluster
    instances: 3
    primaryUpdateStrategy: unsupervised
    
    # Immagine PostgreSQL
    imageName: ghcr.io/cloudnative-pg/postgresql:16.1

    # === SUPERUSER ACCESS ===
    enableSuperuserAccess: true  # Abilitato per permettere accesso diretto al superuser

    # === SUPERUSER SECRET CONFIGURATION ===
    superuserSecret:
      name: ""  # Se vuoto, usa il pattern: {{release-name}}-superuser-credentials
      username: "postgres"  # Username del superuser
      password: ""  # Se vuoto, genera una password casuale

    # Bootstrap configuration
    bootstrap:
      database: prima_nota
      owner: postgres
      secret:
        name: ""  # Se vuoto, usa lo stesso del superuserSecret
      initSql:
        enabled: true
 
    # PostgreSQL parameters
    postgresql:
      parameters:
        max_connections: "200"
        shared_buffers: "256MB"
        effective_cache_size: "1GB"
        work_mem: "4MB"
        maintenance_work_mem: "64MB"
      pg_hba:
        - "local all all trust"
        - "host all all 127.0.0.1/32 md5"
        - "host all all ::1/128 md5"
        - "host all all 0.0.0.0/0 md5"
    
    # Storage configuration
    storage:
      size: 20Gi
      storageClass: ""  # Usa default o specifica (es. ceph-block)
    
    # Resources
    resources:
      requests:
        memory: "512Mi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "1000m"
    
    # Monitoring
    monitoring:
      enabled: true
      customQueriesConfigMap:
        name: ""  # Se vuoto, non usa custom queries
    
    # === ENVIRONMENT VARIABLES CONFIGURATION ===
    env:
      # Cloud Storage Provider Configuration
      # Supported providers: aws-s3, azure-blob-storage, google-cloud-storage
      cloudStorage:
        enabled: false  # Abilita per configurare backup su cloud storage
        provider: "aws-s3"  # aws-s3 | azure-blob-storage | google-cloud-storage
        
        # === AWS S3 / MinIO Configuration ===
        awsS3:
          credentialsSecret:
            name: "aws-s3-credentials"  # Nome del secret
            accessKeyIdKey: "AWS_ACCESS_KEY_ID"
            secretAccessKeyKey: "AWS_SECRET_ACCESS_KEY"
            regionKey: "AWS_DEFAULT_REGION"  # Opzionale
          # Configurazione diretta (sconsigliata per production)
          direct:
            accessKeyId: ""
            secretAccessKey: ""
            region: ""
        
        # === Azure Blob Storage Configuration ===
        azureBlob:
          credentialsSecret:
            name: "azure-blob-credentials"
            accountNameKey: "AZURE_STORAGE_ACCOUNT"
            accountKeyKey: "AZURE_STORAGE_KEY"
            # Oppure usa SAS token
            sasTokenKey: "AZURE_STORAGE_SAS_TOKEN"
          direct:
            accountName: ""
            accountKey: ""
            sasToken: ""
        
        # === Google Cloud Storage Configuration ===
        googleCloud:
          credentialsSecret:
            name: "gcs-credentials"
            # Per Service Account JSON
            serviceAccountJsonKey: "GOOGLE_APPLICATION_CREDENTIALS_JSON"
            # Oppure percorso al file
            serviceAccountFileKey: "GOOGLE_APPLICATION_CREDENTIALS"
            projectIdKey: "GOOGLE_CLOUD_PROJECT"  # Opzionale
          direct:
            projectId: ""
            serviceAccountJson: ""  # JSON as string
      
      # Custom environment variables (for any additional needs)
      custom: []
      # Esempio:
      # - name: "CUSTOM_VAR"
      #   value: "custom-value"
      # - name: "SECRET_VAR"
      #   valueFrom:
      #     secretKeyRef:
      #       name: "my-secret"
      #       key: "my-key"
    
    # Backup configuration (opzionale)
    backup:
      enabled: false  # Disabilitato di default
      retentionPolicy: "30d"  # Ritenzione backup: 30d, 7w, 12m, etc.
      destinationPath: ""  # es: "s3://my-bucket/postgres-backups" per S3, "gs://bucket/path" per GCS, etc.
      endpointURL: ""  # Per MinIO/S3-compatible: "https://minio.example.com" (solo per S3/MinIO)
      # NOTA: credenziali sono derivate automaticamente dalle environment variables (env.cloudStorage)
      
      # Configurazione avanzata WAL
      wal:
        maxParallel: 8  # Parallelismo per WAL upload
        compression: "gzip"  # Compressione WAL
      
      # Configurazione avanzata Data
      data:
        compression: "gzip"  # Compressione backup: gzip, lz4, snappy
        jobs: 2  # Jobs paralleli per backup
        immediateCheckpoint: false  # Checkpoint immediato

  # Scheduled Backups (opzionali)
  scheduledBackups:
    # Daily backup (full backup ogni giorno)
    daily:
      enabled: false
      name: ""  # Se vuoto, usa il pattern: {{release-name}}-daily-backup
      schedule: "0 0 2 * * *"  # Ogni giorno alle 2:00 (formato: sec min hour day month weekday)
      suspend: false
      immediateCheckpoint: false
      backupOwnerReference: "self"  # self | cluster | none
    
    # Weekly backup (full backup settimanale)
    weekly:
      enabled: false
      name: ""  # Se vuoto, usa il pattern: {{release-name}}-weekly-backup
      schedule: "0 0 3 * * 0"  # Ogni domenica alle 3:00 (formato: sec min hour day month weekday)
      suspend: false
      immediateCheckpoint: true  # Forza checkpoint immediato per backup settimanale
      backupOwnerReference: "self"
    
    # Monthly backup (full backup mensile)
    monthly:
      enabled: false
      name: ""  # Se vuoto, usa il pattern: {{release-name}}-monthly-backup
      schedule: "0 0 4 1 * *"  # Il primo giorno di ogni mese alle 4:00
      suspend: false
      immediateCheckpoint: true
      backupOwnerReference: "self"
    
    # Custom backup schedules (per esigenze specifiche)
    custom: []
    # Esempio:
    # - name: "business-hours-backup"
    #   schedule: "0 0 */4 * * 1-5"  # Ogni 4 ore nei giorni lavorativi
    #   suspend: false
    #   immediateCheckpoint: false

# Database Esterno (per casi avanzati)
externalDatabase:
  enabled: false
  host: ""
  port: "5432"
  database: "prima_nota"
  username: "postgres"
  existingSecret: ""
  secretPasswordKey: "password"

backend:
  enabled: true
  image:
    registry: docker.io
    repository: vcnngr/pnbackend
    tag: "latest"
    pullPolicy: IfNotPresent
  replicaCount: 1
  service:
    type: ClusterIP
    port: 3001
  env:
    NODE_ENV: production
    PORT: 3001
    JWT_SECRET: ""
    RATE_LIMIT_WINDOW_MS: 900000
    RATE_LIMIT_MAX_REQUESTS: 100
    MAX_FILE_SIZE: 10485760
    LOG_LEVEL: info
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  livenessProbe:
    httpGet:
      path: /api/health
      port: 3001
    initialDelaySeconds: 50
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /api/health
      port: 3001
    initialDelaySeconds: 30
    periodSeconds: 15

frontend:
  enabled: true
  image:
    registry: docker.io
    repository: vcnngr/pnfrontend
    tag: "latest"
    pullPolicy: IfNotPresent
  replicaCount: 1
  service:
    type: ClusterIP
    port: 80
  env:
    REACT_APP_API_URL: /api
    REACT_APP_NAME: Prima Nota
    REACT_APP_VERSION: 1.0.0
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

pgadmin:
  enabled: true
  image:
    registry: docker.io
    repository: dpage/pgadmin4
    tag: "9.2"
    pullPolicy: IfNotPresent
  auth:
    email: admin@prima-nota.com
    password: ""
  env:
    PGADMIN_DEFAULT_EMAIL: admin@prima-nota.com
    PGADMIN_DEFAULT_PASSWORD: ""
    PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "True"
    PGADMIN_CONFIG_LOGIN_BANNER: "Prima Nota - Database Management"
    PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: "20"
    PGADMIN_LISTEN_PORT: "5050"
    PGADMIN_CONFIG_WTF_CSRF_TIME_LIMIT: "None"
    PGADMIN_CONFIG_UPGRADE_CHECK_ENABLED: "False"
    PGADMIN_CONFIG_SHOW_GRAVATAR_IMAGE: "False"
  service:
    type: ClusterIP
    port: 5050
  resources:
    limits:
      cpu: 700m
      memory: 512Mi
    requests:
      cpu: 400m
      memory: 256Mi
  livenessProbe:
    httpGet:
      path: /misc/ping
      port: pgadmin
    initialDelaySeconds: 120
    periodSeconds: 60
    timeoutSeconds: 30
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /misc/ping
      port: pgadmin
    initialDelaySeconds: 90
    periodSeconds: 45
    timeoutSeconds: 5
    failureThreshold: 3
  persistence:
    enabled: true
    size: 1Gi
    accessModes:
      - ReadWriteOnce

ingress:
  enabled: true
  className: "traefik"
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    cert-manager.io/cluster-issuer: le-global-issuer
  hosts:
    - host: prima-nota.example.com
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /pgadmin
          pathType: Prefix
          service: pgadmin
  tls:
    - secretName: example-tls
      hosts:
        - prima-nota.example.com

serviceAccount:
  create: true
  annotations: {}
  name: ""

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000