{{- if .Values.postgresql.cloudnativepg.enabled }}
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ include "prima-nota.fullname" . }}-postgresql
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "prima-nota.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  instances: {{ .Values.postgresql.cloudnativepg.instances | default 3 }}
  
  # Immagine PostgreSQL
  imageName: {{ .Values.postgresql.image.registry }}/{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
  
  # Storage configuration
  storage:
    size: {{ .Values.postgresql.persistence.size | quote }}
    {{- if .Values.postgresql.persistence.storageClass }}
    storageClass: {{ .Values.postgresql.persistence.storageClass }}
    {{- end }}
    resizeInUseVolumes: true
  
  # WAL storage separato per performance
  {{- if .Values.postgresql.cloudnativepg.walStorage.enabled }}
  walStorage:
    size: {{ .Values.postgresql.cloudnativepg.walStorage.size | default "2Gi" }}
    {{- if .Values.postgresql.persistence.storageClass }}
    storageClass: {{ .Values.postgresql.persistence.storageClass }}
    {{- end }}
    resizeInUseVolumes: true
  {{- end }}
  
  # Configurazione PostgreSQL
  postgresql:
    parameters:
      # Parametri di base per compatibilit√†
      shared_preload_libraries: "pg_stat_statements"
      pg_stat_statements.track: "all"
      # Parametri per backup
      wal_level: "replica"
      archive_mode: "on"
      archive_timeout: "5min"
      max_wal_senders: "10"
      wal_keep_size: "1GB"
      checkpoint_completion_target: "0.9"
      # Merge parametri custom
      {{- range $key, $value := .Values.postgresql.parameters }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  
  # Bootstrap con database e utente dalla configurazione esistente
  bootstrap:
    initdb:
      database: {{ .Values.postgresql.auth.database }}
      owner: {{ .Values.postgresql.auth.username }}
      {{- if .Values.postgresql.auth.password }}
      secret:
        name: {{ include "prima-nota.fullname" . }}-secret
      {{- end }}
      # Script di inizializzazione (se hai config map)
      {{- if .Values.postgresql.initScripts }}
      postInitApplicationSQL:
        {{- range $key, $value := .Values.postgresql.initScripts }}
        - {{ $value | quote }}
        {{- end }}
      {{- end }}
  
  # Resource limits (dalla configurazione esistente)
  resources:
    {{- toYaml .Values.postgresql.resources | nindent 4 }}
  
  # High Availability configuration
  {{- if gt (.Values.postgresql.cloudnativepg.instances | default 3 | int) 1 }}
  postgresql:
    syncReplicaElectionConstraint:
      enabled: true
  {{- end }}
  
  # Monitoring
  monitoring:
    enabled: {{ .Values.postgresql.monitoring.enabled | default true }}
    {{- if .Values.postgresql.monitoring.podMonitor }}
    podMonitorEnabled: true
    {{- end }}
  
  # Backup configuration
  {{- if .Values.postgresql.backup.enabled }}
  backup:
    target: {{ .Values.postgresql.backup.target | default "prefer-standby" }}
    retentionPolicy: {{ .Values.postgresql.backup.retentionPolicy | default "30d" }}
    {{- if .Values.postgresql.backup.barmanObjectStore }}
    barmanObjectStore:
      destinationPath: {{ .Values.postgresql.backup.barmanObjectStore.destinationPath }}
      {{- if .Values.postgresql.backup.barmanObjectStore.endpointURL }}
      endpointURL: {{ .Values.postgresql.backup.barmanObjectStore.endpointURL }}
      {{- end }}
      {{- if .Values.postgresql.backup.barmanObjectStore.s3Credentials }}
      s3Credentials:
        accessKeyId:
          name: {{ .Values.postgresql.backup.barmanObjectStore.s3Credentials.accessKeyId.name }}
          key: {{ .Values.postgresql.backup.barmanObjectStore.s3Credentials.accessKeyId.key }}
        secretAccessKey:
          name: {{ .Values.postgresql.backup.barmanObjectStore.s3Credentials.secretAccessKey.name }}
          key: {{ .Values.postgresql.backup.barmanObjectStore.s3Credentials.secretAccessKey.key }}
      {{- end }}
      wal:
        compression: {{ .Values.postgresql.backup.barmanObjectStore.wal.compression | default "gzip" }}
        retention: {{ .Values.postgresql.backup.barmanObjectStore.wal.retention | default "7d" }}
      data:
        compression: {{ .Values.postgresql.backup.barmanObjectStore.data.compression | default "gzip" }}
        immediateCheckpoint: {{ .Values.postgresql.backup.barmanObjectStore.data.immediateCheckpoint | default true }}
        jobs: {{ .Values.postgresql.backup.barmanObjectStore.data.jobs | default 2 }}
    {{- end }}
  {{- end }}

{{- end }}
