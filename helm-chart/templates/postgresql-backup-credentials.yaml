{{- if and .Values.postgresql.cloudnativepg.enabled .Values.postgresql.backup.barmanObjectStore.s3Credentials }}
{{- $secretName := printf "%s-backup-credentials" (include "prima-nota.fullname" .) }}
{{- $existingSecret := lookup "v1" "Secret" .Release.Namespace $secretName }}
{{- if not $existingSecret }}
---
# Secret viene creato SOLO se non esiste già
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "prima-nota.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql-backup
  annotations:
    # Annotation per indicare che è gestito da Helm ma non deve essere sovrascritto
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": {{ .Release.Name }}
    "meta.helm.sh/release-namespace": {{ .Release.Namespace }}
type: Opaque
stringData:
  ACCESS_KEY_ID: {{ .Values.postgresql.backup.barmanObjectStore.s3Credentials.accessKey | quote }}
  SECRET_ACCESS_KEY: {{ .Values.postgresql.backup.barmanObjectStore.s3Credentials.secretKey | quote }}
{{- else }}
---
# Secret esiste già - Solo aggiorna labels/annotations se necessario
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "prima-nota.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql-backup
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": {{ .Release.Name }}
    "meta.helm.sh/release-namespace": {{ .Release.Namespace }}
    "helm.sh/secret-checksum": {{ $existingSecret.data | toYaml | sha256sum }}
type: Opaque
# Mantieni i dati esistenti
data:
  {{- range $key, $value := $existingSecret.data }}
  {{ $key }}: {{ $value }}
  {{- end }}
{{- end }}
{{- end }}
